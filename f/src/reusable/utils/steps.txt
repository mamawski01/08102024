{
  //creating an api
  *create Model first
  *go to routes create a route
  *create a controller js
  *open postman, check if connected
  *go to bOperators
  *open postman, check if working
  *done in Be

  *create a api js
  *go to api
  *check the parameters of api created to api operator
  *future steps below: take care of this first happening
  //first happening sending data to BE
  function fIOToBIO(fIO, data) {
    fSocket.emit(fIO, data);
  }

  *go back to BE, go to bIO
  *for realtime update
  *create a custom code in bIO
  //second happening then, sending data to FE

  *go the desired file in fe to connect
  ***bIO flow : first and second happening is done
  //first happening sending data to BE
  function fIOToBIO(fIO, data) {
    fSocket.emit(fIO, data);
  }
  //second happening then, sending data to FE

  *go the desired file in fe to connect, consume! and check if working, use console.log
  *this is  the pattern
    //ConfirmedUser
    const updater1post = useDataGetter("b2fPostConfirmedUser");
    const updater2patch = useDataGetter("b2fPatchConfirmedUser");
    const updater3delete = useDataGetter("b2fDeleteConfirmedUser");
    useGetter(
      getConfirmedUsers,
      "f2bGetConfirmedUsers",
      null,
      updater1post,
      updater2patch,
      updater3delete,
    );
    const confirmedUsersGets = useDataGetter("b2fGetConfirmedUsers");
    //ConfirmedUser

  *useGetter is a useEffect to fetch data and update realtime, if id is not null, mean realtime update of one item
  *useDataGetter //last happening consuming data from BE by b2f(be to fe)

  //useGet
    export function useGetter(
    getData,
    fIO,
    id,
    updater1,
    updater2,
    updater3,
    updater4,
  ) {
    useEffect(() => {
      async function fetchData() {
        await getData(fIO, id);
      }
      fetchData();
      return () => {};
    }, [getData, fIO, id, updater1, updater2, updater3, updater4]);
  }

  export function useDataGetter(bIO) {
    const [apiData, apiDataSet] = useState();
    //last happening consuming data from BE
    {
      fSocket.on(bIO, (data) => {
        apiDataSet(data);
      });
      return apiData?.data;
    }
  }
  //useGet
}

{
  //creating a edit form
  *open App.jsx, create a route, create a component
  *add Linker that will get the id of the item and match the route of App.jsx to your path route
  *go to your jsx Form and add this:
   return (
    <Form
      dataStructure={[
        [],
        [
          {
            rowLabels: "attendanceUpload",
            inputNames: ["attendanceUpload"],
            inputTypes: ["file"],
            isRequired: [true],
            specifyFiles: [[".txt"]],
          },
        ],
      ]}
      onSubmitRule="attendanceUpload"
    ></Form>
  );
  
  data structure will be base on your Model on BE
}